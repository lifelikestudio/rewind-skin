<main class="product-page__hero wrapper wrapper--md">
  <section class="product-page__container">
    {% assign downcased_vendor = product.vendor | strip | downcase %}
    {% comment %} revisit the br logic because it should also check if they're logged-in or not and some br has variants {% endcomment %}
    {% comment %}
      {% if downcased_vendor == 'biologique recherche' and customer == null or product.variants.size <= 1 %}
      <div class="product-page__copy-lockup product-page__copy-lockup--br">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
      {% render 'okendo-reviews-product-rating-summary', product: product %}
      </div>
      {{ product.description }}
      </div>
      {% else %} {% endif %}
    {% endcomment %}
    <div class="product-page__copy-lockup">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      {{ product.description }}
    </div>
  </section>
  <section class="product-page__container">
    {% comment %}
      <div class="keen-slider">
      {% assign current_variant_id = product.selected_or_first_available_variant.id %}

      {% for variant in product.variants %}
      {% assign variant_value = variant.options.first | downcase | replace: ' ', '-' %}
      {% assign images_found = false %}

      {% for image in product.images %}
      {% if image.src contains variant_value and image.src contains 'product-page' %}
      {% assign images_found = true %}
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ image.src | img_url: '893x' }}"
      alt="{{ image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}

      {% if images_found == false %}
      <!-- Fallback to the product's featured image or a default image -->
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ product.featured_image.src | img_url: '893x' }}"
      alt="{{ product.featured_image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}
      </div>
    {% endcomment %}
    <div class="keen-slider" id="keen-slider"></div>
  </section>
  <section class="product-page__container">
    <form
      action="/cart/add"
      method="post"
      enctype="multipart/form-data"
      class="product-page__checkout-form">
      <h1 class="product-page__title is--mobile">{{ product.title }}</h1>
      <div class="product-page__rating is--mobile">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      <!-- Check if the product has multiple variants -->
      {% if product.variants.size > 1 %}
        <!-- If yes, display a dropdown menu for variant selection -->
        <div class="product-page__variants-group">
          {% for variant in product.variants %}
            <div class="product-page__variant">
              <input
                type="radio"
                name="id"
                value="{{ variant.id }}"
                id="variant-{{ variant.id }}"
                {% if forloop.first %}
                checked
                {% endif %}>
              <label class="all-caps" for="variant-{{ variant.id }}">{{ variant.title }}</label>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <!-- If the product does not have multiple variants, use a hidden input to add the product's variant ID -->
        <input
          type="hidden"
          name="id"
          value="{{ product.variants.first.id }}">
      {% endif %}
      {% assign downcased_vendor = product.vendor | strip | downcase %}

      {% if downcased_vendor == 'biologique recherche' and localization.country.iso_code != 'CA' %}
        {% for variant in product.variants %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Exclusive to Canada
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endfor %}
      {% endif %}

      {% for variant in product.variants %}
        {% if variant.available %}
          <div class="product-page__quantity-add-group variant-section variant-section-{{ variant.id }}">
            <!-- Quantity input field -->
            <div class="product-page__quantity">
              <button type="button" class="quantity__decrement">-</button>
              <input
                class="product-page__quantity-input"
                type="number"
                min="1"
                name="quantity-{{ variant.id }}"
                value="1"
                data-variant-id="{{ variant.id }}">
              <button type="button" class="quantity__increment">+</button>
            </div>
            <!-- Insertion point for Subify widget -->
            <div class="subify-insertion-point" data-variant-id="{{ variant.id }}"></div>
            <!-- Add to Cart button -->
            <button
              class="btn btn--secondary all-caps product-page__checkout-btn"
              type="submit"
              name="add-to-cart-{{ variant.id }}">
              {% if variant.compare_at_price > variant.price %}
                <span>Add to Bag</span>
                <span class="checkout-btn__sale-price">
                  <del>{{ variant.compare_at_price | money_with_currency | remove: '.00' }}</del>
                  <ins>{{ variant.price | money_with_currency | remove: '.00' }}</ins>
                </span>
              {% else %}
                <span>Add to Bag</span>
                <span>{{ variant.price | money_with_currency | remove: '.00' }}</span>
              {% endif %}
            </button>
            <p class="product-page__payment-plan">
              or 4 interest-free payments of {% assign divided_price = variant.price | divided_by: 4 %}
              {{ divided_price | money_with_currency }} with
              <span class="is--emphasized">Sezzle</span>
            </p>
          </div>
        {% else %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Out of Stock
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endif %}
      {% endfor %}
      <!-- Add Subify container outside the variant loop, but hide it initially -->
      <div
        id="subify-container"
        class="subify-container"
        style="display: none;"></div>
      <script type="text/javascript">
        (function() {
          // Track initialization state
          let subifyInitialized = false;
          let activeVariantId = null;
          let initializationInProgress = false;
          
          // Get all possible insertion points for Subify
          const allInsertionPoints = document.querySelectorAll('.subify-insertion-point');
          
          // Function to hide all insertion points (to avoid multiple containers)
          function hideAllInsertionPoints() {
            allInsertionPoints.forEach(point => {
              const existingContainer = point.querySelector('.subify-container');
              if (existingContainer) {
                existingContainer.remove();
              }
            });
          }
          
          // Function to safely destroy any existing Subify widgets
          function destroyExistingWidgets() {
            try {
              // Check if Subify SDK has a destroy method
              if (window.subifySdk && typeof window.subifySdk.destroyWidget === 'function') {
                window.subifySdk.destroyWidget();
              }
              
              // Clear the container content as backup
              const container = document.getElementById('subify-container');
              if (container) {
                container.innerHTML = '';
              }
            } catch (err) {
              console.warn('Error destroying Subify widget:', err);
            }
          }
          
          // Function to move Subify container to the correct insertion point
          function moveSubifyContainer(variantId) {
            const container = document.getElementById('subify-container');
            if (!container) return;
            
            hideAllInsertionPoints();
            
            // Find the insertion point for the current variant
            const insertionPoint = document.querySelector(`.subify-insertion-point[data-variant-id="${variantId}"]`);
            if (!insertionPoint) return;
            
            // Move the Subify container to the insertion point
            insertionPoint.appendChild(container);
            container.style.display = 'block';
          }
          
          // Function to initialize or reinitialize Subify with error handling
          function initSubifyWidget() {
            // Prevent multiple simultaneous initializations
            if (initializationInProgress) return;
            initializationInProgress = true;
            
            // Get the selected variant ID
            const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                        document.querySelector('input[name="id"]');
            const variantId = selectedVariantInput ? selectedVariantInput.value : null;
            
            // Skip if it's the same variant and already initialized
            if (activeVariantId === variantId && subifyInitialized) {
              initializationInProgress = false;
              return;
            }
            
            console.log("Initializing Subify with variant ID:", variantId);
            
            // Clean up any existing widgets first
            destroyExistingWidgets();
            
            // Set the active variant
            activeVariantId = variantId;
            
            // Move the Subify container to the correct insertion point
            moveSubifyContainer(variantId);
            
            // Only proceed if we have the SDK and a selected variant
            if (window.subifySdk && variantId) {
              try {
                window.subifySdk.renderWidget(
                  {{ product | json }}, 
                  {
                    renderPosition: {wrapper: "#subify-container"},
                    selectedVariantId: variantId
                  }
                );
                subifyInitialized = true;
              } catch (err) {
                console.error('Error initializing Subify widget:', err);
                // If the widget already exists error occurs, try to recover
                if (err.message && err.message.includes('already exists')) {
                  destroyExistingWidgets();
                  setTimeout(() => {
                    try {
                      window.subifySdk.renderWidget(
                        {{ product | json }}, 
                        {
                          renderPosition: {wrapper: "#subify-container"},
                          selectedVariantId: variantId
                        }
                      );
                      subifyInitialized = true;
                    } catch (retryErr) {
                      console.error('Failed to retry Subify widget initialization:', retryErr);
                    }
                  }, 100);
                }
              }
            } else {
              console.warn("Could not initialize Subify. SDK loaded:", !!window.subifySdk, "Variant ID:", variantId);
            }
            
            initializationInProgress = false;
          }
          
          // Initialize on page load with URL-specified variant (with delayed execution)
          function handleInitialLoad() {
            // Check URL for variant ID
            const urlParams = new URLSearchParams(window.location.search);
            const variantFromUrl = urlParams.get('variant');
            
            if (variantFromUrl) {
              // If URL has variant, select that radio button
              const variantInput = document.querySelector(`input[name="id"][value="${variantFromUrl}"]`);
              if (variantInput) {
                variantInput.checked = true;
              }
            }
            
            // Use a slight delay to ensure only one initialization happens
            setTimeout(() => {
              // Now initialize Subify with the correct variant
              if (window.subifySdk) {
                initSubifyWidget();
              } else {
                window.addEventListener("subify:sdkLoaded", initSubifyWidget);
              }
            }, 100);
          }
          
          // Set up variant change listeners
          function setupVariantListeners() {
            const variantInputs = document.querySelectorAll('input[name="id"]');
            variantInputs.forEach(input => {
              input.addEventListener('change', initSubifyWidget);
            });
          }
          
          // Only run initialization once when the DOM is ready
          let setupComplete = false;
          document.addEventListener('DOMContentLoaded', function() {
            if (!setupComplete) {
              handleInitialLoad();
              setupVariantListeners();
              setupComplete = true;
            }
          });
        })();
      </script>
    </form>
  </section>
</main>
{% if product.metafields.custom.directions != blank or product.metafields.custom.ingredients != blank %}
  <section class="product-page__more-info wrapper wrapper--md">
    {% if product.metafields.custom.directions != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">Directions</h2>
        <p class="product-page__body">{{ product.metafields.custom.directions }}</p>
      </div>
    {% endif %}
    {% if product.metafields.custom.ingredients != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">INCI Ingredients</h2>
        <p class="product-page__body">{{ product.metafields.custom.ingredients }}</p>
      </div>
    {% endif %}
  </section>
{% endif %}
<section class="product-page__reviews wrapper wrapper--md">
  <h2 class="product-page__heading">Reviews</h2>
  {% render 'okendo-reviews-widget'
    , product: product %}
</section>
{% section 'skin-analysis' %}
{% comment %}
  <section class="product-page__related">
  <div class="filter-header wrapper wrapper--md">
  <h2 class="all-caps filter-header__type">Related</h2>
  <div class="filter-header__container">
  <button class="all-caps filter-header__type filter-header__btn">Products</button>
  <button class="all-caps filter-header__type filter-header__btn">Treatments</button>
  </div>
  <a class="all-caps filter-header__type" href="/collections/all">Shop All</a>
  </div>
  <div class="product-page__placeholder wrapper wrapper--md">
  <div class="product-page__placeholder-inner"></div>
  </div>
  </section>
{% endcomment %}