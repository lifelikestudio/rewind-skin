<main class="product-page__hero wrapper wrapper--md">
  <section class="product-page__container">
    {% assign downcased_vendor = product.vendor | strip | downcase %}
    {% comment %} revisit the br logic because it should also check if they're logged-in or not and some br has variants {% endcomment %}
    {% comment %}
      {% if downcased_vendor == 'biologique recherche' and customer == null or product.variants.size <= 1 %}
      <div class="product-page__copy-lockup product-page__copy-lockup--br">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
      {% render 'okendo-reviews-product-rating-summary', product: product %}
      </div>
      {{ product.description }}
      </div>
      {% else %} {% endif %}
    {% endcomment %}
    <div class="product-page__copy-lockup">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>

      <!-- Generate selling plan pricing data using Liquid -->
      <script type="application/json" id="selling-plan-data">
        {
          "product": {{ product.id | json }},
          "variants": [
            {% for variant in product.variants %}
              {
                "id": {{ variant.id | json }},
                "price": {{ variant.price | json }},
                "compare_at_price": {{ variant.compare_at_price | json }},
                "selling_plan_allocations": [
                  {% for allocation in variant.selling_plan_allocations %}
                    {
                      "selling_plan_id": "{{ allocation.selling_plan_id }}",
                      "price": {{ allocation.price | json }}
                      {% if allocation.compare_at_price %},
                      "compare_at_price": {{ allocation.compare_at_price | json }}
                      {% endif %}
                      {% if allocation.per_delivery_price %},
                      "per_delivery_price": {{ allocation.per_delivery_price | json }}
                      {% endif %}
                    }{% unless forloop.last %},{% endunless %}
                  {% endfor %}
                ]
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ],
          "selling_plan_groups": {{ product.selling_plan_groups | json }},
          "money_format": {{ shop.money_with_currency_format | json }}
        }
      </script>

      {{ product.description }}
    </div>
  </section>
  <section class="product-page__container">
    {% comment %}
      <div class="keen-slider">
      {% assign current_variant_id = product.selected_or_first_available_variant.id %}

      {% for variant in product.variants %}
      {% assign variant_value = variant.options.first | downcase | replace: ' ', '-' %}
      {% assign images_found = false %}

      {% for image in product.images %}
      {% if image.src contains variant_value and image.src contains 'product-page' %}
      {% assign images_found = true %}
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ image.src | img_url: '893x' }}"
      alt="{{ image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}

      {% if images_found == false %}
      <!-- Fallback to the product's featured image or a default image -->
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ product.featured_image.src | img_url: '893x' }}"
      alt="{{ product.featured_image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}
      </div>
    {% endcomment %}
    <div class="keen-slider" id="keen-slider"></div>
  </section>
  <section class="product-page__container">
    <form
      action="/cart/add"
      method="post"
      enctype="multipart/form-data"
      class="product-page__checkout-form">
      <h1 class="product-page__title is--mobile">{{ product.title }}</h1>
      <div class="product-page__rating is--mobile">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      <!-- Check if the product has multiple variants -->
      {% if product.variants.size > 1 %}
        <!-- If yes, display a dropdown menu for variant selection -->
        <div class="product-page__variants-group">
          {% for variant in product.variants %}
            <div class="product-page__variant">
              <input
                type="radio"
                name="id"
                value="{{ variant.id }}"
                id="variant-{{ variant.id }}"
                {% if forloop.first %}
                checked
                {% endif %}>
              <label class="all-caps" for="variant-{{ variant.id }}">{{ variant.title }}</label>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <!-- If the product does not have multiple variants, use a hidden input to add the product's variant ID -->
        <input
          type="hidden"
          name="id"
          value="{{ product.variants.first.id }}">
    {% endif %}

      <!-- Implement Subify subscription widget right after variant selection -->
      {% assign has_subify_plans = false %}
      {% for selling_plan_group in product.selling_plan_groups %}
        {% if selling_plan_group.app_id == 'subi' or selling_plan_group.app_id == 'subify' %}
          {% assign has_subify_plans = true %}
          {% break %}
        {% endif %}
      {% endfor %}

      {% if has_subify_plans %}
        <!-- Subify widget wrapper placed right after variant selection -->
        <div id="subify-widget-wrapper" class="subify-widget-wrapper"></div>
      {% endif %}

      {% assign downcased_vendor = product.vendor | strip | downcase %}

      {% if downcased_vendor == 'biologique recherche' and localization.country.iso_code != 'CA' %}
        {% for variant in product.variants %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Exclusive to Canada
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endfor %}
      {% endif %}

      {% for variant in product.variants %}
        {% if variant.available %}
          <div class="product-page__quantity-add-group variant-section variant-section-{{ variant.id }}">
            <!-- Quantity input field -->
            <div class="product-page__quantity">
              <button type="button" class="quantity__decrement">-</button>
              <input
                class="product-page__quantity-input"
                type="number"
                min="1"
                name="quantity-{{ variant.id }}"
                value="1"
                data-variant-id="{{ variant.id }}">
              <button type="button" class="quantity__increment">+</button>
            </div>

            <!-- Remove the Subify wrapper from inside the variant loop -->

            <!-- Add to Cart button -->
            <button
              class="btn btn--secondary all-caps product-page__checkout-btn"
              type="submit"
              name="add-to-cart-{{ variant.id }}">
              <!-- This span contains the button text -->
              <span id="add-to-cart-text-{{ variant.id }}">Add to Bag</span>
              <span>
                {% if variant.compare_at_price > variant.price %}
                  <span class="checkout-btn__sale-price">
                    <del>{{ variant.compare_at_price | money_with_currency | remove: '.00' }}</del>
                    <ins>{{ variant.price | money_with_currency | remove: '.00' }}</ins>
                  </span>
                {% else %}
                  {{ variant.price | money_with_currency | remove: '.00' }}
                {% endif %}
              </span>
            </button>
            <p class="product-page__payment-plan">
              or 4 interest-free payments of {% assign divided_price = variant.price | divided_by: 4 %}
              {{ divided_price | money_with_currency }} with
              <span class="is--emphasized">Sezzle</span>
            </p>
          </div>
        {% else %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Out of Stock
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endif %}
      {% endfor %}
    </form>
  </section>
</main>
{% if product.metafields.custom.directions != blank or product.metafields.custom.ingredients != blank %}
  <section class="product-page__more-info wrapper wrapper--md">
    {% if product.metafields.custom.directions != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">Directions</h2>
        <p class="product-page__body">{{ product.metafields.custom.directions }}</p>
      </div>
    {% endif %}
    {% if product.metafields.custom.ingredients != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">INCI Ingredients</h2>
        <p class="product-page__body">{{ product.metafields.custom.ingredients }}</p>
      </div>
    {% endif %}
  </section>
{% endif %}
<section class="product-page__reviews wrapper wrapper--md">
  <h2 class="product-page__heading">Reviews</h2>
  {% render 'okendo-reviews-widget'
    , product: product %}
</section>
{% section 'skin-analysis' %}
{% comment %}
  <section class="product-page__related">
  <div class="filter-header wrapper wrapper--md">
  <h2 class="all-caps filter-header__type">Related</h2>
  <div class="filter-header__container">
  <button class="all-caps filter-header__type filter-header__btn">Products</button>
  <button class="all-caps filter-header__type filter-header__btn">Treatments</button>
  </div>
  <a class="all-caps filter-header__type" href="/collections/all">Shop All</a>
  </div>
  <div class="product-page__placeholder wrapper wrapper--md">
  <div class="product-page__placeholder-inner"></div>
  </div>
  </section>
{% endcomment %}

<!-- Subi Integration - Conditional on product having Subi selling plans -->
<script>
  const productData = {{ product | json }};
  const hasSubiPlans = productData.selling_plan_groups && 
                      productData.selling_plan_groups.some(group => 
                        group.app_id === 'subi' || group.app_id === 'subify'
                      );
  console.log("Product has Subi selling plans:", hasSubiPlans);
</script>

{% if hasSubiPlans %}
  <!-- Subi widget wrapper -->
  <div id="subi-widget-wrapper" class="subi-widget-wrapper"></div>

  <!-- Subi SDK script -->
  <script>
    console.log("Loading Subi SDK...");
  </script>
  <script
    src="https://cdn.hengam.io/subify/subify-sdk.js"
    defer
    id="subi-sdk-script"></script>

  <!-- Subi styles -->
  <style>
    .subi-widget-wrapper {
      width: 100%;
      margin: 15px 0;
      display: block;
    }

    .product-page__checkout-form {
      display: flex;
      flex-direction: column;
    }

    .variant-section {
      order: 3;
    }

    .product-page__variants-group {
      order: 1;
    }

    #subi-widget-wrapper {
      order: 2;
    }
  </style>

  <!-- Subi initialization script -->
  <script type="text/javascript">
    console.log("Subi init script running");
    
    (function() {
      let isWidgetInitialized = false;
      
      function initSubi() {
        console.log("initSubi function called");
        if (isWidgetInitialized) {
          console.log("Widget already initialized, skipping");
          return;
        }
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        console.log("Selected variant for Subi:", variantId);
        
        if (window.subifySdk && variantId) {
          console.log("Subi SDK found in window");
          
          try {
            console.log("Attempting to render Subi widget");
            window.subifySdk.renderWidget(
              {{ product | json }}, 
              {
                renderPosition: {
                  wrapper: "#subi-widget-wrapper",
                  position: "APPEND"
                },
                sellingPlanInput: {
                  wrapper: "form.product-page__checkout-form",
                  id: "selling-plan-input"
                },
                selectedVariantId: variantId
              }
            ).then(() => {
              console.log("Subi widget rendered successfully");
              isWidgetInitialized = true;
            }).catch(error => {
              console.error("Error initializing Subi widget:", error);
            });
          } catch (error) {
            console.error("Error during Subi initialization:", error);
          }
        } else {
          console.error("Subi SDK not found or variant ID missing");
        }
      }
      
      function updateVariant() {
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId && typeof window.subifySdk.changeVariant === 'function') {
          console.log("Updating Subi variant to:", variantId);
          window.subifySdk.changeVariant({{ product.id }}, variantId);
        }
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM loaded, checking for Subi SDK");
        if (window.subifySdk) {
          console.log("Subi SDK already available at DOMContentLoaded");
          initSubi();
        } else {
          console.log("Waiting for Subi SDK to load...");
          window.addEventListener("subify:sdkLoaded", function() {
            console.log("Subi SDK loaded event fired");
            initSubi();
          });
          
          // Fallback: check once after a delay
          setTimeout(function() {
            if (!isWidgetInitialized && window.subifySdk) {
              console.log("Subi SDK found through timeout check");
              initSubi();
            }
          }, 2000);
        }
        
        // Add change listeners to variant selectors
        document.querySelectorAll('input[name="id"]').forEach(input => {
          input.addEventListener('change', updateVariant);
        });
      });
    })();
  </script>{% endif %}

{% comment %} Implement Subify subscription widget {% endcomment %}
{% assign has_subify_plans = false %}
{% for selling_plan_group in product.selling_plan_groups %}
  {% if selling_plan_group.app_id == 'subi' or selling_plan_group.app_id == 'subify' %}
    {% assign has_subify_plans = true %}
    {% break %}
  {% endif %}
{% endfor %}

{% if has_subify_plans %}
  <!-- Subify SDK script -->
  <script src="https://cdn.hengam.io/subify/subify-sdk.js" defer></script>

  <!-- Subify styles -->
  <style>
    .subify-widget-wrapper {
      width: 100%;
      margin: 15px 0;
      display: block;
    }
  </style>

  <!-- Subify initialization script -->
  <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
      try {
        // Get the selling plan data from the pre-rendered JSON
        const sellingPlanData = JSON.parse(document.getElementById('selling-plan-data').textContent);
        console.log("Pre-rendered selling plan data:", sellingPlanData);
        
      let isWidgetInitialized = false;
      
      // Function to format money with currency using Shopify's format
      function formatMoney(cents) {
        if (typeof cents == 'string') cents = cents.replace('.', '');
        cents = parseInt(cents);
        
          // Use the money format from our pre-rendered data
          const format = sellingPlanData.money_format;
        
        function formatWithDelimiters(number, precision, thousands, decimal) {
          precision = precision || 2;
          thousands = thousands || ',';
          decimal = decimal || '.';

          if (isNaN(number) || number == null) return '0';
          
            // Format with full precision first
          number = (number/100.0).toFixed(precision);
          
            // Remove trailing zeros if it's a whole number
            if (parseFloat(number) === parseInt(number)) {
              number = parseInt(number);
            }
            
            // Format with appropriate delimiters
            let parts = String(number).split('.');
          const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
            const cents = parts.length > 1 ? (decimal + parts[1]) : '';
          
          return dollars + cents;
        }
        
        const formatted = formatWithDelimiters(cents);
        return format.replace(/\{\{\s*amount\s*\}\}/, formatted);
      }
      
        // Function to get accurate selling plan price from the pre-rendered data
        function getSellingPlanPrice(variantId, sellingPlanId) {
          // Find the variant in our data
          const variant = sellingPlanData.variants.find(v => v.id === parseInt(variantId));
          if (!variant) {
            console.log("Variant not found in selling plan data:", variantId);
            console.log("Available variants:", sellingPlanData.variants.map(v => v.id));
            return null;
          }
          
          // If no selling plan selected, return regular price
          if (!sellingPlanId) {
            return {
              price: variant.price,
              compare_at_price: variant.compare_at_price
            };
          }
          
          console.log("Looking for selling plan ID:", sellingPlanId);
          console.log("Available allocations for variant:", variant.selling_plan_allocations);
          
          // Try different format comparisons to find the allocation
          const allocation = variant.selling_plan_allocations.find(a => {
            // Try string comparison first
            if (a.selling_plan_id === sellingPlanId.toString()) return true;
            
            // Try number comparison next
            if (parseInt(a.selling_plan_id) === parseInt(sellingPlanId)) return true;
            
            return false;
          });
          
          if (!allocation) {
            console.log("Allocation not found for selling plan in pre-rendered data");
            
            // Fallback to calculating the price based on selling plan groups
            const sellingPlanGroups = sellingPlanData.selling_plan_groups || [];
            let selectedPlan = null;
            
            // Find the selling plan across all groups
            for (const group of sellingPlanGroups) {
              if (!group.selling_plans) continue;
              
              for (const plan of group.selling_plans) {
                if (plan.id.toString() === sellingPlanId.toString() || 
                    parseInt(plan.id) === parseInt(sellingPlanId)) {
                  selectedPlan = plan;
                  break;
                }
              }
              if (selectedPlan) break;
            }
            
            if (selectedPlan && selectedPlan.price_adjustments && selectedPlan.price_adjustments.length > 0) {
              console.log("Found selling plan in groups:", selectedPlan);
              
              // Calculate the adjusted price
              const priceAdjust = selectedPlan.price_adjustments[0];
              let adjustedPrice;
              
              if (priceAdjust.value_type === 'percentage') {
                adjustedPrice = variant.price * (1 - (priceAdjust.value / 100));
              } else if (priceAdjust.value_type === 'fixed_amount') {
                adjustedPrice = variant.price - priceAdjust.value;
              } else if (priceAdjust.value_type === 'price') {
                adjustedPrice = priceAdjust.value;
              } else {
                adjustedPrice = variant.price;
              }
              
              return {
                price: Math.round(adjustedPrice),
                compare_at_price: variant.compare_at_price
              };
            }
            
            // Last resort: fall back to product's one-time purchase price but log warning
            console.warn("Could not find subscription price, falling back to regular price");
            return {
              price: variant.price,
              compare_at_price: variant.compare_at_price
            };
          }
          
          return {
            price: allocation.price,
            compare_at_price: allocation.compare_at_price || variant.compare_at_price
          };
        }
        
        // Function to update button price based on selected selling plan
        function updateButtonPrice(sellingPlanId, formattedPlanName) {
          console.log("updateButtonPrice called with selling plan:", sellingPlanId);
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                    document.querySelector('input[name="id"]');
        if (!selectedVariantInput) {
          console.log("No variant selected");
          return;
        }
        
        const variantId = parseInt(selectedVariantInput.value);
          
          // Get pricing data from our server-rendered JSON
          const pricingData = getSellingPlanPrice(variantId, sellingPlanId);
          if (!pricingData) {
            console.log("Pricing data not found");
          return;
        }
        
          console.log("Pricing data:", pricingData);
        
        // Find the buttons for this variant
        const variantSection = document.querySelector(`.variant-section-${variantId}`);
        if (!variantSection) {
          console.log("Variant section not found");
          return;
        }
        
        const checkoutButton = variantSection.querySelector('.product-page__checkout-btn');
        const priceSpan = checkoutButton.querySelector('span:last-child');
        
        if (!priceSpan) {
          console.log("Price span not found");
          return;
        }
        
          // Format the prices with currency
          const formattedPrice = formatMoney(pricingData.price);
              
              // Update the price display
          if (pricingData.compare_at_price && pricingData.compare_at_price > pricingData.price) {
            const formattedComparePrice = formatMoney(pricingData.compare_at_price);
            if (formattedPlanName && sellingPlanId) {
              // For sale items with subscription
              priceSpan.innerHTML = `
                <del>${formattedComparePrice}</del>
                <ins>${formattedPrice}${formattedPlanName}</ins>
              `;
            } else {
              // Regular sale items
              priceSpan.innerHTML = `
                <del>${formattedComparePrice}</del>
                <ins>${formattedPrice}</ins>
              `;
            }
          } else if (formattedPlanName && sellingPlanId) {
            // For regular items with subscription
            priceSpan.innerHTML = `${formattedPrice}${formattedPlanName}`;
          } else {
            // Regular one-time purchase
            priceSpan.textContent = formattedPrice;
          }
          
          // Update Sezzle payments
          const paymentPlanElement = variantSection.querySelector('.product-page__payment-plan');
          if (paymentPlanElement) {
            const dividedPrice = Math.round(pricingData.price / 4);
            const formattedDividedPrice = formatMoney(dividedPrice);
            paymentPlanElement.innerHTML = `or 4 interest-free payments of ${formattedDividedPrice} with <span class="is--emphasized">Sezzle</span>`;
        }
      }
      
      // Function to initialize or re-initialize the widget
      function initSubifyWidget() {
        if (!window.subifySdk) return;
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                    document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? parseInt(selectedVariantInput.value) : null;
        
        if (!variantId) return;
        
        try {
          window.subifySdk.renderWidget(
            {{ product | json }}, 
            {
              renderPosition: {
                wrapper: "#subify-widget-wrapper",
                position: "APPEND"
              },
              sellingPlanInput: {
                wrapper: "form.product-page__checkout-form",
                id: "selling-plan-input"
              },
              useCardApi: true
            }
          ).then(() => {
            isWidgetInitialized = true;
            console.log("Subify widget initialized successfully");
            
              // Setup cart integration
            setupCartIntegration();
          }).catch(error => {
            console.error("Error initializing Subify widget:", error);
          });
        } catch (error) {
          console.error("Error during Subify initialization:", error);
        }
      }
      
      // Setup event listeners for selling plan changes
      function setupCartIntegration() {
        // Listen for selling plan changes and update button price
        window.addEventListener("subify:sellingPlanChange", function(event) {
            const { selectedSellingPlan } = event.detail;
          console.log("Subify selling plan changed to:", selectedSellingPlan);
          
          // Get the selected variant ID
          const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                     document.querySelector('input[name="id"]');
          const variantId = selectedVariantInput ? selectedVariantInput.value : null;
          
          // Get the text element for the button
          const buttonTextElement = document.getElementById(`add-to-cart-text-${variantId}`);
          
          // Update the button text based on whether a selling plan is selected
          if (buttonTextElement) {
            if (selectedSellingPlan && selectedSellingPlan.id) {
              buttonTextElement.textContent = "Subscribe";
            } else {
              buttonTextElement.textContent = "Add to Bag";
            }
          }
          
          // Get the formatted plan name if available
          // let formattedPlanName = '';
          // if (selectedSellingPlan && selectedSellingPlan.name) {
          //   // Format the plan name: "Every 2 weeks" -> "/2 Weeks"
          //   formattedPlanName = selectedSellingPlan.name
          //     .replace(/^Every\s+/i, '/') // Replace "Every " with "/"
          //     .replace(/^\s*/, '')        // Trim leading spaces
          //     .replace(/^(\d+)/, '$1')    // Keep the number
          //     .replace(/\b\w/g, l => l.toUpperCase()); // Capitalize words
          // }
          
          // // Update the button price with the formatted plan name
          // const sellingPlanId = selectedSellingPlan && selectedSellingPlan.id ? 
          //                      selectedSellingPlan.id : selectedSellingPlan;
          // updateButtonPrice(sellingPlanId, formattedPlanName);
        });
      }
      
      // Function to update the variant in the widget
      function updateSubifyVariant() {
        if (!window.subifySdk || !isWidgetInitialized) return;
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? parseInt(selectedVariantInput.value) : null;
        
        if (variantId && typeof window.subifySdk.changeVariant === 'function') {
          window.subifySdk.changeVariant({{ product.id }}, variantId);
          console.log("Subify variant updated to:", variantId);
        }
      }
      
      // Initialize when SDK is loaded
      if (window.subifySdk) {
        initSubifyWidget();
      } else {
        window.addEventListener("subify:sdkLoaded", initSubifyWidget);
      }
      
      // Add change listeners to variant selectors
      document.querySelectorAll('input[name="id"]').forEach(input => {
          input.addEventListener('change', function() {
            updateSubifyVariant();
            
            // Check if a selling plan is selected and update prices
            const sellingPlanInput = document.querySelector('input[name="selling_plan"]');
            if (sellingPlanInput && sellingPlanInput.value) {
              updateButtonPrice(sellingPlanInput.value);
            } else {
              // Reset to one-time purchase price
              updateButtonPrice(null);
            }
          });
        });
      } catch (error) {
        console.error("Error in Subify initialization:", error);
      }
    });
  </script>
{% endif %}