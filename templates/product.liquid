<main class="product-page__hero wrapper wrapper--md">
  <section class="product-page__container">
    {% assign downcased_vendor = product.vendor | strip | downcase %}
    {% comment %} revisit the br logic because it should also check if they're logged-in or not and some br has variants {% endcomment %}
    {% comment %}
      {% if downcased_vendor == 'biologique recherche' and customer == null or product.variants.size <= 1 %}
      <div class="product-page__copy-lockup product-page__copy-lockup--br">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
      {% render 'okendo-reviews-product-rating-summary', product: product %}
      </div>
      {{ product.description }}
      </div>
      {% else %} {% endif %}
    {% endcomment %}
    <div class="product-page__copy-lockup">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      {{ product.description }}
    </div>
  </section>
  <section class="product-page__container">
    {% comment %}
      <div class="keen-slider">
      {% assign current_variant_id = product.selected_or_first_available_variant.id %}

      {% for variant in product.variants %}
      {% assign variant_value = variant.options.first | downcase | replace: ' ', '-' %}
      {% assign images_found = false %}

      {% for image in product.images %}
      {% if image.src contains variant_value and image.src contains 'product-page' %}
      {% assign images_found = true %}
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ image.src | img_url: '893x' }}"
      alt="{{ image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}

      {% if images_found == false %}
      <!-- Fallback to the product's featured image or a default image -->
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ product.featured_image.src | img_url: '893x' }}"
      alt="{{ product.featured_image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}
      </div>
    {% endcomment %}
    <div class="keen-slider" id="keen-slider"></div>
  </section>
  <section class="product-page__container">
    <form
      action="/cart/add"
      method="post"
      enctype="multipart/form-data"
      class="product-page__checkout-form">
      <h1 class="product-page__title is--mobile">{{ product.title }}</h1>
      <div class="product-page__rating is--mobile">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      <!-- Check if the product has multiple variants -->
      {% if product.variants.size > 1 %}
        <!-- If yes, display a dropdown menu for variant selection -->
        <div class="product-page__variants-group">
          {% for variant in product.variants %}
            <div class="product-page__variant">
              <input
                type="radio"
                name="id"
                value="{{ variant.id }}"
                id="variant-{{ variant.id }}"
                {% if forloop.first %}
                checked
                {% endif %}>
              <label class="all-caps" for="variant-{{ variant.id }}">{{ variant.title }}</label>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <!-- If the product does not have multiple variants, use a hidden input to add the product's variant ID -->
        <input
          type="hidden"
          name="id"
          value="{{ product.variants.first.id }}">
      {% endif %}

      <!-- Place Subify widget wrapper outside of the variant loop but after variant selection -->
      <div id="subify-widget-wrapper" class="subify-widget-wrapper"></div>

      {% assign downcased_vendor = product.vendor | strip | downcase %}

      {% if downcased_vendor == 'biologique recherche' and localization.country.iso_code != 'CA' %}
        {% for variant in product.variants %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Exclusive to Canada
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endfor %}
      {% endif %}

      {% for variant in product.variants %}
        {% if variant.available %}
          <div class="product-page__quantity-add-group variant-section variant-section-{{ variant.id }}">
            <!-- Quantity input field -->
            <div class="product-page__quantity">
              <button type="button" class="quantity__decrement">-</button>
              <input
                class="product-page__quantity-input"
                type="number"
                min="1"
                name="quantity-{{ variant.id }}"
                value="1"
                data-variant-id="{{ variant.id }}">
              <button type="button" class="quantity__increment">+</button>
            </div>

            <!-- Remove the Subify wrapper from inside the variant loop -->

            <!-- Add to Cart button -->
            <button
              class="btn btn--secondary all-caps product-page__checkout-btn"
              type="submit"
              name="add-to-cart-{{ variant.id }}">
              {% if variant.compare_at_price > variant.price %}
                <span>Add to Bag</span>
                <span class="checkout-btn__sale-price">
                  <del>{{ variant.compare_at_price | money_with_currency | remove: '.00' }}</del>
                  <ins>{{ variant.price | money_with_currency | remove: '.00' }}</ins>
                </span>
              {% else %}
                <span>Add to Bag</span>
                <span>{{ variant.price | money_with_currency | remove: '.00' }}</span>
              {% endif %}
            </button>
            <p class="product-page__payment-plan">
              or 4 interest-free payments of {% assign divided_price = variant.price | divided_by: 4 %}
              {{ divided_price | money_with_currency }} with
              <span class="is--emphasized">Sezzle</span>
            </p>
          </div>
        {% else %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Out of Stock
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endif %}
      {% endfor %}

      <style>
        /* Style for the Subify widget wrapper */
        .subify-widget-wrapper {
          width: 100%;
          margin: 15px 0;
          display: block;
          /* Ensure it's always displayed */
        }

        /* Add styling to position the widget properly in the layout flow */
        .product-page__checkout-form {
          display: flex;
          flex-direction: column;
        }

        /* Ensure variant sections appear after the widget */
        .variant-section {
          order: 3;
        }

        /* Position the widget after the variant selection */
        .product-page__variants-group {
          order: 1;
        }

        #subify-widget-wrapper {
          order: 2;
        }
      </style>

      <!-- Add this to your product.liquid file in the <head> section or at the top of your form section -->
      <script
        src="https://cdn.hengam.io/subify/subify-sdk.js"
        defer
        id="subify-sdk-script"></script>

      <!-- The rest of your implementation with a few adjustments -->
      <script type="text/javascript">
        (function() {
          let isWidgetInitialized = false;
          
          // Initialize Subify
          function initSubify() {
            if (isWidgetInitialized) return;
            
            const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                       document.querySelector('input[name="id"]');
            const variantId = selectedVariantInput ? selectedVariantInput.value : null;
            
            if (window.subifySdk && variantId) {
              window.subifySdk.renderWidget(
                {{ product | json }}, 
                {
                  renderPosition: {
                    wrapper: "#subify-widget-wrapper",
                    position: "APPEND"
                  },
                  sellingPlanInput: {
                    wrapper: "form.product-page__checkout-form",
                    id: "selling-plan-input"
                  },
                  selectedVariantId: variantId
                }
              );
              
              isWidgetInitialized = true;
            }
          }
          
          // Handle variant changes
          function updateVariant() {
            const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                      document.querySelector('input[name="id"]');
            const variantId = selectedVariantInput ? selectedVariantInput.value : null;
            
            if (window.subifySdk && variantId && typeof window.subifySdk.changeVariant === 'function') {
              window.subifySdk.changeVariant({{ product.id }}, variantId);
            }
          }
          
          // Initialize when the page loads
          document.addEventListener('DOMContentLoaded', function() {
            if (window.subifySdk) {
              initSubify();
            } else {
              window.addEventListener("subify:sdkLoaded", initSubify);
            }
            
            // Add change listeners to variant selectors
            document.querySelectorAll('input[name="id"]').forEach(input => {
              input.addEventListener('change', updateVariant);
            });
          });
        })();
      </script>
    </form>
  </section>
</main>
{% if product.metafields.custom.directions != blank or product.metafields.custom.ingredients != blank %}
  <section class="product-page__more-info wrapper wrapper--md">
    {% if product.metafields.custom.directions != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">Directions</h2>
        <p class="product-page__body">{{ product.metafields.custom.directions }}</p>
      </div>
    {% endif %}
    {% if product.metafields.custom.ingredients != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">INCI Ingredients</h2>
        <p class="product-page__body">{{ product.metafields.custom.ingredients }}</p>
      </div>
    {% endif %}
  </section>
{% endif %}
<section class="product-page__reviews wrapper wrapper--md">
  <h2 class="product-page__heading">Reviews</h2>
  {% render 'okendo-reviews-widget'
    , product: product %}
</section>
{% section 'skin-analysis' %}
{% comment %}
  <section class="product-page__related">
  <div class="filter-header wrapper wrapper--md">
  <h2 class="all-caps filter-header__type">Related</h2>
  <div class="filter-header__container">
  <button class="all-caps filter-header__type filter-header__btn">Products</button>
  <button class="all-caps filter-header__type filter-header__btn">Treatments</button>
  </div>
  <a class="all-caps filter-header__type" href="/collections/all">Shop All</a>
  </div>
  <div class="product-page__placeholder wrapper wrapper--md">
  <div class="product-page__placeholder-inner"></div>
  </div>
  </section>
{% endcomment %}
<script type="text/javascript">
  // Create an object with pre-formatted money values for all variants
  var formattedPrices = {
    {% for variant in product.variants %}
      "{{ variant.id }}": {
        "price": "{{ variant.price | money_with_currency | remove: '.00' }}",
        "compareAtPrice": "{{ variant.compare_at_price | money_with_currency | remove: '.00' }}"
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };
  
  // Update the button text and price when subscription is selected
  function updateButtonWithSubscriptionPrice(sellingPlan) {
    // Get currently selected variant
    const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                document.querySelector('input[name="id"]');
    if (!selectedVariantInput) return;
    
    const variantId = selectedVariantInput.value;
    const addToCartBtn = document.querySelector(`button[name="add-to-cart-${variantId}"]`);
    if (!addToCartBtn) return;
    
    // Get the button text and price spans
    const textSpan = addToCartBtn.querySelector('span:first-child');
    const priceSpan = addToCartBtn.querySelector('span:last-child');
    
    if (!sellingPlan) {
      // Reset to one-time purchase
      if (textSpan) textSpan.textContent = 'Add to Bag';
      
      // Reset to original price using pre-formatted values
      if (priceSpan && formattedPrices[variantId]) {
        const variant = findVariantById(variantId);
        
        if (variant && variant.compare_at_price > variant.price) {
          priceSpan.innerHTML = `<del>${formattedPrices[variantId].compareAtPrice}</del> <ins>${formattedPrices[variantId].price}</ins>`;
        } else {
          priceSpan.innerHTML = formattedPrices[variantId].price;
        }
      }
      
      console.log("Reset button to one-time purchase");
      return;
    }
    
    // Change button text for subscription
    if (textSpan) {
      textSpan.textContent = 'Subscribe & Save';
    }
    
    // Update price if we have the selling plan details
    if (priceSpan && sellingPlan) {
      console.log("Subscription selling plan:", sellingPlan);
      
      try {
        // Get the current variant
        const variant = findVariantById(variantId);
        
        if (!variant) {
          console.error("Could not find variant with ID:", variantId);
          return;
        }
        
        // Calculate the subscription price
        let subscriptionPrice = variant.price;
        let discountApplied = false;
        
        // If selling plan has discount info, calculate the discounted price
        if (sellingPlan.price_adjustments && sellingPlan.price_adjustments.length > 0) {
          const adjustment = sellingPlan.price_adjustments[0];
          discountApplied = true;
          
          console.log("Found price adjustment:", adjustment);
          
          if (adjustment.value_type === 'percentage') {
            // Percentage discount
            const discountPercent = adjustment.value;
            subscriptionPrice = Math.round(variant.price * (1 - (discountPercent / 100)));
          } else if (adjustment.value_type === 'fixed_amount') {
            // Fixed amount discount
            subscriptionPrice = variant.price - adjustment.value;
          } else if (adjustment.value_type === 'price') {
            // Direct price override
            subscriptionPrice = adjustment.value;
          }
        } else if (sellingPlan.price !== undefined) {
          subscriptionPrice = sellingPlan.price;
          discountApplied = subscriptionPrice < variant.price;
        }
        
        // We need to format the subscription price using our shopify money filter
        // Use a data attribute to help us identify which variant and what discount to apply
        
        // Store the subscription price as a data attribute on the button
        addToCartBtn.setAttribute('data-subscription-price', subscriptionPrice);
        addToCartBtn.setAttribute('data-discount-applied', discountApplied);
        
        if (discountApplied) {
          // Send this to a separate function that will handle the price display
          updateSubscriptionPriceDisplay(priceSpan, variant.price, subscriptionPrice, variantId);
        } else {
          // If no discount, use the regular price
          priceSpan.innerHTML = formattedPrices[variantId].price;
        }
      } catch (err) {
        console.error("Error updating subscription price:", err);
      }
    }
  }
  
  // Helper function to find variant by ID
  function findVariantById(variantId) {
    const product = {{ product | json }};
    return product.variants.find(v => v.id.toString() === variantId.toString());
  }
  
  // This function will update the display with the subscription price
  function updateSubscriptionPriceDisplay(priceSpan, originalPrice, subscriptionPrice, variantId) {
    // We'll use a simple approach to format the subscription price
    // This multiplies the price by currency conversion and adds the currency symbol
    
    // Get the original formatted price
    const originalFormatted = formattedPrices[variantId].price;
    
    // Create a simple formatted version for the subscription price
    // This is a basic approach - for perfect formatting we'd need server-side help
    const currencySymbol = originalFormatted.charAt(0);
    const subscriptionFormatted = currencySymbol + (subscriptionPrice / 100).toFixed(2) + ' {{ shop.currency }}';
    
    // Update the display
    priceSpan.innerHTML = `<del>${originalFormatted}</del> <ins>${subscriptionFormatted}</ins>`;
    console.log(`Updated price: ${originalFormatted} → ${subscriptionFormatted}`);
  }
</script>

<!-- First, let's check if the product has any selling plans -->
<script>
  const productData = {{ product | json }};
  const hasSellingPlans = productData.selling_plan_groups && 
                        productData.selling_plan_groups.length > 0;
</script>

<!-- Only render the Subify elements if selling plans exist -->
{% raw %}
  <script type="text/javascript">
      if (hasSellingPlans) {
    document.write(`
      <div id="subify-widget-wrapper" class="subify-widget-wrapper"></div>
      <script src="https://cdn.hengam.io/subify/subify-sdk.js" defer id="subify-sdk-script"><\/script>
    `);
      }
  </script>
{% endraw %}

<!-- Conditionally include the Subify initialization script -->
<script type="text/javascript">
  if (hasSellingPlans) {
    (function() {
      let isWidgetInitialized = false;
      
      function initSubify() {
        if (isWidgetInitialized) return;
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                  document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId) {
          window.subifySdk.renderWidget(
            {{ product | json }}, 
            {
              renderPosition: {
                wrapper: "#subify-widget-wrapper",
                position: "APPEND"
              },
              sellingPlanInput: {
                wrapper: "form.product-page__checkout-form",
                id: "selling-plan-input"
              },
              selectedVariantId: variantId
            }
          );
          
          isWidgetInitialized = true;
        }
      }
      
      function updateVariant() {
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId && typeof window.subifySdk.changeVariant === 'function') {
          window.subifySdk.changeVariant({{ product.id }}, variantId);
        }
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        if (window.subifySdk) {
          initSubify();
        } else {
          window.addEventListener("subify:sdkLoaded", initSubify);
        }
        
        document.querySelectorAll('input[name="id"]').forEach(input => {
          input.addEventListener('change', updateVariant);
        });
      });
    })();
  }
</script>

<!-- Conditionally include the styles -->
<style>
  {% raw %}
    <script type="text/javascript" > if (hasSellingPlans) {
    document.write(` .subify-widget-wrapper { width: 100%; margin: 15px 0; display: block; } .product-page__checkout-form { display: flex; flex-direction: column; } .variant-section { order: 3; } .product-page__variants-group { order: 1; } #subify-widget-wrapper { order: 2; } `);
  }
  </script>
{% endraw %}
</style>

<!-- Subi Subscription Widget Integration -->
<script>
  const productData = {{ product | json }};
  const hasSubiPlans = productData.selling_plan_groups && 
                       productData.selling_plan_groups.some(group => 
                         group.app_id === 'subi' || group.app_id === 'subify'
                       );
</script>

{% if true %}
  <!-- Only include Subi elements if selling plans exist -->
  <div id="subi-widget-wrapper" class="subi-widget-wrapper"></div>

  <script
    src="https://cdn.hengam.io/subify/subify-sdk.js"
    defer
    id="subi-sdk-script"></script>

  <style>
    .subi-widget-wrapper {
      width: 100%;
      margin: 15px 0;
      display: block;
    }

    .product-page__checkout-form {
      display: flex;
      flex-direction: column;
    }

    .variant-section {
      order: 3;
    }

    .product-page__variants-group {
      order: 1;
    }

    #subi-widget-wrapper {
      order: 2;
    }
  </style>

  <script type="text/javascript">
    (function() {
      let isWidgetInitialized = false;
      
      function initSubi() {
        if (isWidgetInitialized) return;
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId) {
          console.log("Initializing Subi with variant:", variantId);
          try {
            window.subifySdk.renderWidget(
              {{ product | json }}, 
              {
                renderPosition: {
                  wrapper: "#subi-widget-wrapper",
                  position: "APPEND"
                },
                sellingPlanInput: {
                  wrapper: "form.product-page__checkout-form",
                  id: "selling-plan-input"
                },
                selectedVariantId: variantId
              }
            ).catch(error => {
              console.error("Error initializing Subi widget:", error);
            });
            
            isWidgetInitialized = true;
          } catch (error) {
            console.error("Error during Subi initialization:", error);
          }
        }
      }
      
      function updateVariant() {
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId && typeof window.subifySdk.changeVariant === 'function') {
          console.log("Updating Subi variant to:", variantId);
          window.subifySdk.changeVariant({{ product.id }}, variantId);
        }
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM loaded, checking for Subi SDK");
        if (window.subifySdk) {
          initSubi();
        } else {
          console.log("Waiting for Subi SDK to load...");
          window.addEventListener("subify:sdkLoaded", function() {
            console.log("Subi SDK loaded, initializing...");
            initSubi();
          });
        }
        
        // Add change listeners to variant selectors
        document.querySelectorAll('input[name="id"]').forEach(input => {
          input.addEventListener('change', updateVariant);
        });
      });
    })();
  </script>
{% endif %}