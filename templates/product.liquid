<main class="product-page__hero wrapper wrapper--md">
  <section class="product-page__container">
    {% assign downcased_vendor = product.vendor | strip | downcase %}
    {% comment %} revisit the br logic because it should also check if they're logged-in or not and some br has variants {% endcomment %}
    {% comment %}
      {% if downcased_vendor == 'biologique recherche' and customer == null or product.variants.size <= 1 %}
      <div class="product-page__copy-lockup product-page__copy-lockup--br">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
      {% render 'okendo-reviews-product-rating-summary', product: product %}
      </div>
      {{ product.description }}
      </div>
      {% else %} {% endif %}
    {% endcomment %}
    <div class="product-page__copy-lockup">
      <h1 class="product-page__title is--desktop">{{ product.title }}</h1>
      <div class="product-page__rating is--desktop">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      {{ product.description }}
    </div>
  </section>
  <section class="product-page__container">
    {% comment %}
      <div class="keen-slider">
      {% assign current_variant_id = product.selected_or_first_available_variant.id %}

      {% for variant in product.variants %}
      {% assign variant_value = variant.options.first | downcase | replace: ' ', '-' %}
      {% assign images_found = false %}

      {% for image in product.images %}
      {% if image.src contains variant_value and image.src contains 'product-page' %}
      {% assign images_found = true %}
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ image.src | img_url: '893x' }}"
      alt="{{ image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}

      {% if images_found == false %}
      <!-- Fallback to the product's featured image or a default image -->
      <div
      class="keen-slider__slide product-page__product-img-container"
      data-variant-id="{{ variant.id }}"
      style="{% if variant.id != current_variant_id %}display: none;{% endif %}">
      <img
      src="{{ product.featured_image.src | img_url: '893x' }}"
      alt="{{ product.featured_image.alt | escape }}"
      width="893"
      height="auto"
      loading="eager"
      class="product-page__product-img"
      data-variant-id="{{ variant.id }}">
      </div>
      {% endif %}
      {% endfor %}
      </div>
    {% endcomment %}
    <div class="keen-slider" id="keen-slider"></div>
  </section>
  <section class="product-page__container">
    <form
      action="/cart/add"
      method="post"
      enctype="multipart/form-data"
      class="product-page__checkout-form">
      <h1 class="product-page__title is--mobile">{{ product.title }}</h1>
      <div class="product-page__rating is--mobile">
        {% render 'okendo-reviews-product-rating-summary'
          , product: product %}
      </div>
      <!-- Check if the product has multiple variants -->
      {% if product.variants.size > 1 %}
        <!-- If yes, display a dropdown menu for variant selection -->
        <div class="product-page__variants-group">
          {% for variant in product.variants %}
            <div class="product-page__variant">
              <input
                type="radio"
                name="id"
                value="{{ variant.id }}"
                id="variant-{{ variant.id }}"
                {% if forloop.first %}
                checked
                {% endif %}>
              <label class="all-caps" for="variant-{{ variant.id }}">{{ variant.title }}</label>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <!-- If the product does not have multiple variants, use a hidden input to add the product's variant ID -->
        <input
          type="hidden"
          name="id"
          value="{{ product.variants.first.id }}">
    {% endif %}

      <!-- Implement Subify subscription widget right after variant selection -->
      {% assign has_subify_plans = false %}
      {% for selling_plan_group in product.selling_plan_groups %}
        {% if selling_plan_group.app_id == 'subi' or selling_plan_group.app_id == 'subify' %}
          {% assign has_subify_plans = true %}
          {% break %}
        {% endif %}
      {% endfor %}

      {% if has_subify_plans %}
        <!-- Subify widget wrapper placed right after variant selection -->
        <div id="subify-widget-wrapper" class="subify-widget-wrapper"></div>
      {% endif %}

      {% assign downcased_vendor = product.vendor | strip | downcase %}

      {% if downcased_vendor == 'biologique recherche' and localization.country.iso_code != 'CA' %}
        {% for variant in product.variants %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Exclusive to Canada
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endfor %}
      {% endif %}

      {% for variant in product.variants %}
        {% if variant.available %}
          <div class="product-page__quantity-add-group variant-section variant-section-{{ variant.id }}">
            <!-- Quantity input field -->
            <div class="product-page__quantity">
              <button type="button" class="quantity__decrement">-</button>
              <input
                class="product-page__quantity-input"
                type="number"
                min="1"
                name="quantity-{{ variant.id }}"
                value="1"
                data-variant-id="{{ variant.id }}">
              <button type="button" class="quantity__increment">+</button>
            </div>

            <!-- Remove the Subify wrapper from inside the variant loop -->

            <!-- Add to Cart button -->
            <button
              class="btn btn--secondary all-caps product-page__checkout-btn"
              type="submit"
              name="add-to-cart-{{ variant.id }}">
              {% if variant.compare_at_price > variant.price %}
                <span>Add to Bag</span>
                <span class="checkout-btn__sale-price">
                  <del>{{ variant.compare_at_price | money_with_currency | remove: '.00' }}</del>
                  <ins>{{ variant.price | money_with_currency | remove: '.00' }}</ins>
                </span>
              {% else %}
                <span>Add to Bag</span>
                <span>{{ variant.price | money_with_currency | remove: '.00' }}</span>
              {% endif %}
            </button>
            <p class="product-page__payment-plan">
              or 4 interest-free payments of {% assign divided_price = variant.price | divided_by: 4 %}
              {{ divided_price | money_with_currency }} with
              <span class="is--emphasized">Sezzle</span>
            </p>
          </div>
        {% else %}
          <div class="product-page__sold-out-group variant-section variant-section-{{ variant.id }}">
            <p class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--sold-out">
              Out of Stock
            </p>
            <a class="btn btn--secondary all-caps product-page__checkout-btn product-page__checkout-btn--icon" href="/collections/all">Continue Shopping</a>
          </div>
        {% endif %}
      {% endfor %}
    </form>
  </section>
</main>
{% if product.metafields.custom.directions != blank or product.metafields.custom.ingredients != blank %}
  <section class="product-page__more-info wrapper wrapper--md">
    {% if product.metafields.custom.directions != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">Directions</h2>
        <p class="product-page__body">{{ product.metafields.custom.directions }}</p>
      </div>
    {% endif %}
    {% if product.metafields.custom.ingredients != blank %}
      <div class="product-page__container">
        <h2 class="product-page__heading">INCI Ingredients</h2>
        <p class="product-page__body">{{ product.metafields.custom.ingredients }}</p>
      </div>
    {% endif %}
  </section>
{% endif %}
<section class="product-page__reviews wrapper wrapper--md">
  <h2 class="product-page__heading">Reviews</h2>
  {% render 'okendo-reviews-widget'
    , product: product %}
</section>
{% section 'skin-analysis' %}
{% comment %}
  <section class="product-page__related">
  <div class="filter-header wrapper wrapper--md">
  <h2 class="all-caps filter-header__type">Related</h2>
  <div class="filter-header__container">
  <button class="all-caps filter-header__type filter-header__btn">Products</button>
  <button class="all-caps filter-header__type filter-header__btn">Treatments</button>
  </div>
  <a class="all-caps filter-header__type" href="/collections/all">Shop All</a>
  </div>
  <div class="product-page__placeholder wrapper wrapper--md">
  <div class="product-page__placeholder-inner"></div>
  </div>
  </section>
{% endcomment %}

<!-- Subi Integration - Conditional on product having Subi selling plans -->
<script>
  const productData = {{ product | json }};
  const hasSubiPlans = productData.selling_plan_groups && 
                      productData.selling_plan_groups.some(group => 
                        group.app_id === 'subi' || group.app_id === 'subify'
                      );
  console.log("Product has Subi selling plans:", hasSubiPlans);
</script>

{% if hasSubiPlans %}
  <!-- Subify widget wrapper -->
  <div id="subify-widget-wrapper" class="subify-widget-wrapper"></div>

  <!-- Subify SDK script -->
  <script>
    console.log("Loading Subify SDK...");
  </script>
  <script
    src="https://cdn.hengam.io/subify/subify-sdk.js"
    defer
    id="subify-sdk-script"></script>

  <!-- Subify styles -->
  <style>
    .subify-widget-wrapper {
      width: 100%;
      margin: 15px 0;
      display: block;
    }

    .product-page__checkout-form {
      display: flex;
      flex-direction: column;
    }

    .variant-section {
      order: 3;
    }

    .product-page__variants-group {
      order: 1;
    }

    #subify-widget-wrapper {
      order: 2;
    }
  </style>

  <!-- Subify initialization script -->
  <script type="text/javascript">
    console.log("Subify init script running");
    
    (function() {
      let isWidgetInitialized = false;
      
      function initSubify() {
        console.log("initSubify function called");
        if (isWidgetInitialized) {
          console.log("Widget already initialized, skipping");
          return;
        }
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        console.log("Selected variant for Subify:", variantId);
        
        if (window.subifySdk && variantId) {
          console.log("Subify SDK found in window");
          
          try {
            console.log("Attempting to render Subify widget");
            window.subifySdk.renderWidget(
              {{ product | json }}, 
              {
                renderPosition: {
                  wrapper: "#subify-widget-wrapper",
                  position: "APPEND"
                },
                sellingPlanInput: {
                  wrapper: "form.product-page__checkout-form",
                  id: "selling-plan-input"
                },
                selectedVariantId: variantId
              }
            ).then(() => {
              console.log("Subify widget rendered successfully");
              isWidgetInitialized = true;
              // Setup the price update functionality for selling plans
              setupSellingPlanPriceUpdates();
            }).catch(error => {
              console.error("Error initializing Subify widget:", error);
            });
          } catch (error) {
            console.error("Error during Subify initialization:", error);
          }
        } else {
          console.error("Subify SDK not found or variant ID missing");
        }
      }
      
      function updateVariant() {
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                   document.querySelector('input[name="id"]');
        const variantId = selectedVariantInput ? selectedVariantInput.value : null;
        
        if (window.subifySdk && variantId && typeof window.subifySdk.changeVariant === 'function') {
          console.log("Updating Subify variant to:", variantId);
          window.subifySdk.changeVariant({{ product.id }}, variantId);
        }
      }
      
      // Function to update button price based on selected selling plan
      function updateButtonPrice(selectedSellingPlan) {
        console.log("updateButtonPrice called with selling plan:", selectedSellingPlan);
        
        // Handle both cases where selectedSellingPlan is an object or just an ID
        const sellingPlanId = selectedSellingPlan && selectedSellingPlan.id ? 
                             selectedSellingPlan.id : selectedSellingPlan;
        
        console.log("Using selling plan ID:", sellingPlanId);
        
        const selectedVariantInput = document.querySelector('input[name="id"]:checked') || 
                                    document.querySelector('input[name="id"]');
        if (!selectedVariantInput) {
          console.log("No variant selected");
          return;
        }
        
        const variantId = parseInt(selectedVariantInput.value);
        const productVariants = {{ product.variants | json }};
        const variant = productVariants.find(v => v.id === variantId);
        
        if (!variant) {
          console.log("Variant not found:", variantId);
          return;
        }
        
        console.log("Selected variant:", variant);
        
        // Find the buttons for this variant
        const variantSection = document.querySelector(`.variant-section-${variantId}`);
        if (!variantSection) {
          console.log("Variant section not found");
          return;
        }
        
        const checkoutButton = variantSection.querySelector('.product-page__checkout-btn');
        const priceSpan = checkoutButton.querySelector('span:last-child');
        
        if (!priceSpan) {
          console.log("Price span not found");
          return;
        }
        
        if (sellingPlanId) {
          console.log("Finding selling plan price for plan ID:", sellingPlanId);
          // Find the selling plan in all selling plan groups
          const allSellingPlanGroups = {{ product.selling_plan_groups | json }};
          let selectedPlan = null;
          let priceAdjustment = null;
          
          // Search through all groups and plans by ID
          for (const group of allSellingPlanGroups) {
            console.log("Checking selling plan group:", group.name);
            for (const plan of group.selling_plans) {
              console.log("Checking plan:", plan.id, "against:", sellingPlanId);
              if (parseInt(plan.id) === parseInt(sellingPlanId)) {
                console.log("Found matching plan by ID!");
                selectedPlan = plan;
                priceAdjustment = plan.price_adjustments[0];
                break;
              }
            }
            if (selectedPlan) break;
          }
          
          // Alternative approach: check variant's selling plan allocations
          if (!selectedPlan && variant.selling_plan_allocations) {
            console.log("Searching in variant's selling_plan_allocations");
            const allocation = variant.selling_plan_allocations.find(
              alloc => parseInt(alloc.selling_plan_id) === parseInt(sellingPlanId)
            );
            
            if (allocation) {
              console.log("Found allocation:", allocation);
              // Use the price directly from the allocation
              const adjustedPrice = allocation.price;
              console.log("Original price:", variant.price);
              console.log("Adjusted price from allocation:", adjustedPrice);
              
              // Update the price display using Shopify's built-in formatting
              if (variant.compare_at_price > variant.price) {
                const compareAtPriceText = "{{ currency.symbol }}" + (variant.compare_at_price/100).toFixed(2) + " {{ currency.code }}";
                const adjustedPriceText = "{{ currency.symbol }}" + (adjustedPrice/100).toFixed(2) + " {{ currency.code }}";
                
                priceSpan.innerHTML = `
                  <del>${compareAtPriceText}</del>
                  <ins>${adjustedPriceText}</ins>
                `;
              } else {
                const adjustedPriceText = "{{ currency.symbol }}" + (adjustedPrice/100).toFixed(2) + " {{ currency.code }}";
                priceSpan.textContent = adjustedPriceText;
              }
              
              // Update Sezzle payments
              const paymentPlanElement = variantSection.querySelector('.product-page__payment-plan');
              if (paymentPlanElement) {
                const dividedPrice = Math.round(adjustedPrice / 4);
                const dividedPriceText = "{{ currency.symbol }}" + (dividedPrice/100).toFixed(2) + " {{ currency.code }}";
                paymentPlanElement.innerHTML = `or 4 interest-free payments of ${dividedPriceText} with <span class="is--emphasized">Sezzle</span>`;
              }
              return;
            }
          }
          
          if (selectedPlan && priceAdjustment) {
            console.log("Found plan:", selectedPlan);
            console.log("Price adjustment:", priceAdjustment);
            
            let adjustedPrice;
            
            // Calculate the adjusted price based on the adjustment type
            if (priceAdjustment.value_type === 'percentage') {
              const discountPercentage = priceAdjustment.value;
              const discountAmount = variant.price * (discountPercentage / 100);
              adjustedPrice = variant.price - discountAmount;
            } else if (priceAdjustment.value_type === 'fixed_amount') {
              adjustedPrice = variant.price - priceAdjustment.value;
            } else if (priceAdjustment.value_type === 'price') {
              adjustedPrice = priceAdjustment.value;
            } else {
              adjustedPrice = variant.price;
            }
            
            console.log("Original price:", variant.price);
            console.log("Adjusted price:", adjustedPrice);
            
            // Update the price display using Shopify's built-in formatting
            if (variant.compare_at_price > variant.price) {
              const compareAtPriceText = "{{ currency.symbol }}" + (variant.compare_at_price/100).toFixed(2) + " {{ currency.code }}";
              const adjustedPriceText = "{{ currency.symbol }}" + (adjustedPrice/100).toFixed(2) + " {{ currency.code }}";
              
              priceSpan.innerHTML = `
                <del>${compareAtPriceText}</del>
                <ins>${adjustedPriceText}</ins>
              `;
            } else {
              const adjustedPriceText = "{{ currency.symbol }}" + (adjustedPrice/100).toFixed(2) + " {{ currency.code }}";
              priceSpan.textContent = adjustedPriceText;
            }
            
            // Update Sezzle payments
            const paymentPlanElement = variantSection.querySelector('.product-page__payment-plan');
            if (paymentPlanElement) {
              const dividedPrice = Math.round(adjustedPrice / 4);
              const dividedPriceText = "{{ currency.symbol }}" + (dividedPrice/100).toFixed(2) + " {{ currency.code }}";
              paymentPlanElement.innerHTML = `or 4 interest-free payments of ${dividedPriceText} with <span class="is--emphasized">Sezzle</span>`;
            }
          } else {
            console.log("Selling plan not found in groups or allocations");
          }
        } else {
          console.log("Resetting to one-time purchase price");
          // Reset to original price with currency
          
          // Keep the same HTML structure for consistency
          if (variant.compare_at_price > variant.price) {
            const compareAtPriceText = "{{ currency.symbol }}" + (variant.compare_at_price/100).toFixed(2) + " {{ currency.code }}";
            const variantPriceText = "{{ currency.symbol }}" + (variant.price/100).toFixed(2) + " {{ currency.code }}";
            
            priceSpan.innerHTML = `
              <del>${compareAtPriceText}</del>
              <ins>${variantPriceText}</ins>
            `;
          } else {
            const variantPriceText = "{{ currency.symbol }}" + (variant.price/100).toFixed(2) + " {{ currency.code }}";
            priceSpan.textContent = variantPriceText;
          }
          
          // Reset Sezzle payments
          const paymentPlanElement = variantSection.querySelector('.product-page__payment-plan');
          if (paymentPlanElement) {
            const dividedPrice = Math.round(variant.price / 4);
            const dividedPriceText = "{{ currency.symbol }}" + (dividedPrice/100).toFixed(2) + " {{ currency.code }}";
            paymentPlanElement.innerHTML = `or 4 interest-free payments of ${dividedPriceText} with <span class="is--emphasized">Sezzle</span>`;
          }
        }
      }
      
      // Setup listeners for selling plan changes
      function setupSellingPlanPriceUpdates() {
        // Listen for selling plan changes and update button price
        window.addEventListener("subify:sellingPlanChange", function(event) {
          const { targetProductId, selectedSellingPlan } = event.detail;
          console.log("Subify selling plan changed to:", selectedSellingPlan);
          
          // Update the button price when selling plan changes
          // Pass just the ID if selectedSellingPlan is an object with an id property
          const sellingPlanId = selectedSellingPlan && selectedSellingPlan.id ? 
                               selectedSellingPlan.id : selectedSellingPlan;
          updateButtonPrice(sellingPlanId);
          
          // Check if the hidden input was created
          setTimeout(() => {
            const sellingPlanInput = document.querySelector('input[name="selling_plan"]');
            console.log("After selection, selling plan input:", 
                        sellingPlanInput ? 
                        `Value: ${sellingPlanInput.value}, Visible: ${sellingPlanInput.style.display !== 'none'}` : 
                        "Not found");
          }, 500);
        });
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM loaded, checking for Subify SDK");
        if (window.subifySdk) {
          console.log("Subify SDK already available at DOMContentLoaded");
          initSubify();
        } else {
          console.log("Waiting for Subify SDK to load...");
          window.addEventListener("subify:sdkLoaded", function() {
            console.log("Subify SDK loaded event fired");
            initSubify();
          });
          
          // Fallback: check once after a delay
          setTimeout(function() {
            if (!isWidgetInitialized && window.subifySdk) {
              console.log("Subify SDK found through timeout check");
              initSubify();
            }
          }, 2000);
        }
        
        // Add change listeners to variant selectors
        document.querySelectorAll('input[name="id"]').forEach(input => {
          input.addEventListener('change', updateVariant);
        });
      });
    })();
  </script>
{% endif %}